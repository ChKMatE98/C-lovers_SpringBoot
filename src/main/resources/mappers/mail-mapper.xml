<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Mail">
	<!-- 메일 매퍼 -->

	<resultMap type="HashMap" id="emailInfo">
		<result property="name" column="name" />
		<result property="company_email" column="company_email" />
		<result property="task_name" column="task_name" />
	</resultMap>

	<insert id="submitSend" useGeneratedKeys="true" keyProperty="id">
		<choose>
			<!-- reservation이 존재할 때 실행 -->
			<when test="reservation != null">
				insert into email value(0, #{send_id}, #{receive_id}, #{title},
				#{content}, #{temporary}, #{reservation}, #{reservation_date},
				default, #{reference_id}, #{send_date}, default, null)
			</when>
			<!-- reservation이 존재하지 않을 때 실행 -->
			<otherwise>
				insert into email value(0, #{send_id}, #{receive_id}, #{title},
				#{content}, #{temporary}, default, null, default, #{reference_id},
				#{send_date}, default, null)
			</otherwise>
		</choose>
	</insert>

	<update id="submitTempSend">
		<choose>
			<when test="reference_id != ''">
				<!-- reference_id가 존재할 때 실행 -->
				update email set receive_id = #{receive_id}, reference_id =
				${reference_id}, title = #{title}, content = #{content}, temporary =
				false where id = #{id}
			</when>
			<otherwise>
				<!-- reference_id가 존재하지 않을 때 실행 -->
				update email set receive_id = #{receive_id}, title = #{title},
				content = #{content}, temporary = false where id = #{id}
			</otherwise>
		</choose>
	</update>

	<insert id="submitFile">
		insert into email_file value(0, #{email_id},
		#{ori_name}, #{sys_name})
	</insert>

	<select id="inBoxList" resultType="com.clovers.dto.EmailDTO">
		select * from (select
		row_number() over(order by send_date desc) rn, info_email.* from
		info_email where receive_id = #{receive_id} and reservation = false
		and temporary = false and trash = false) temp where rn between
		#{start} and #{end}
	</select>

	<select id="inBoxTotalCount" resultType="int">
		select count(*) from
		email where receive_id = #{receive_id} and reservation = false and
		temporary = false and trash = false
	</select>

	<select id="sentBoxList" resultType="com.clovers.dto.EmailDTO">
		select * from (select
		row_number() over(order by coalesce(send_date, id) desc) rn,
		info_email.* from info_email where send_id = #{send_id} and
		reservation = false and temporary = #{temporary} and trash = false)
		temp where rn between #{start} and #{end}
	</select>

	<select id="sentBoxTotalCount" resultType="int">
		select count(*) from
		email where send_id = #{send_id} and reservation = false and temporary
		= #{temporary} and trash = false
	</select>

	<select id="outBoxList" resultType="com.clovers.dto.EmailDTO">
		select * from (select
		row_number() over(order by id desc) rn, info_email.* from info_email
		where send_id = #{send_id} and reservation = true) temp where rn
		between #{start} and #{end}
	</select>

	<select id="outBoxTotalCount" resultType="int">
		select count(*) from
		email where send_id = #{send_id} and reservation = true
	</select>

	<select id="trashList" resultType="com.clovers.dto.EmailDTO">
		select * from (select e.*,
		row_number() over(order by id desc) rn from (select * from info_email
		where (send_id = #{id} or receive_id = #{id}) and trash = true) e)
		ranked where rn between #{start} and #{end}
	</select>

	<select id="trashTotalCount" resultType="int">
		select count(*) from
		email where (send_id = #{id} or receive_id = #{id}) and trash = true
	</select>

	<select id="selectFileByEmailId" resultType="boolean">
		select email_id from
		email_file group by email_id having email_id = ${email_id}
	</select>

	<update id="deleteMail">
		update email set trash = true,
		trash_date=convert_tz(now(),'+00:00', '+09:00') where id = ${id}
	</update>

	<delete id="perDeleteMail">
		delete from email where id = ${id}
	</delete>

	<update id="restoreMail">
		update email set trash = false, trash_date=null where
		id = ${id}
	</update>

	<select id="selectAllById" resultType="com.clovers.dto.EmailDTO">
		select * from info_email
		where id = #{id}
	</select>

	<select id="selectAllFileById"
		resultType="com.clovers.dto.EmailFileDTO">
		select * from email_file where email_id = #{email_id};
	</select>

	<delete id="deleteBySysname">
		delete from email_file where sys_name = #{sys_name};
	</delete>

	<select id="selectAllReservationDate"
		resultType="com.clovers.dto.EmailDTO">
		select * from email where reservation = true and temporary
		= false
	</select>

	<update id="submitReservationMail">
		update email set reservation = false, send_date =
		#{send_date} where id = #{id}
	</update>

	<update id="confirmation">
		update email set confirmation = true where id = ${id}
	</update>

	<select id="autoComplete" resultMap="emailInfo">
		select e.name,
		e.company_email, d.task_name from employee e join dept_task d on
		e.dept_task_id = d.id where name like #{keyword} or company_email like
		#{keyword}
	</select>

	<select id="getEmailByLoginID" resultType="String">
		select company_email
		from employee where id = #{loginID}
	</select>

	<update id="updateMail">
		update email set receive_id = #{receive_id}, title =
		#{title}, content = #{content}, reference_id = #{reference_id} where
		id = ${id}
	</update>

	<select id="selectContentById" resultType="String">
		select content from
		email where id = #{id}
	</select>

	<!-- // 휴지통에서 30일 경과된 메일 정보 불러오기-->
	<select id="selectDeletedTrashList"
		resultType="com.clovers.dto.EmailDTO">
		select * from email where trash = true and DATEDIFF(now(), trash_date)>=30;
	</select>
	<!-- 휴지통에서 30일 경과된 데이터 삭제 -->
	<delete id="autoDeleteInTrash">
		delete from email where id in (select id from (select
		* from email where trash = 1 and DATEDIFF(now(),
		trash_date)>=30)trash_list);
	</delete>
</mapper>