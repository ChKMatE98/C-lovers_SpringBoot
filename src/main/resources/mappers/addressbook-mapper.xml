<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="AddressBook">
	<!-- 주소록 매퍼 -->
	
	<!-- 주소 목록 resultMap -->
	<resultMap id="addressBookAll" type="java.util.HashMap">
	    <result property="id" column="id" />
	    <result property="name" column="name" />
	    <result property="is_share" column="is_share" />
	    <result property="emp_id" column="emp_id" />
	    <result property="email" column="email" />
	    <result property="numberType" column="numberType" />
	    <result property="number" column="number" />
	    <result property="company_name" column="company_name" />
	    <result property="dept_name" column="dept_name" />
	    <result property="job_name" column="job_name" />
	    <result property="addressType" column="addressType" />
	    <result property="address" column="address" />
	    <result property="birthType" column="birthType" />
	    <result property="birth" column="birth" />
	    <result property="memo" column="memo" />
	    <result property="trash" column="trash" />
        <result property="tag_ids" column="tag_ids" />
        <result property="tag_names" column="tag_names" />
        <result property="existFavorite" column="existFavorite"/>
        <result property="is_emp" column="is_emp"/>
	</resultMap>
	
	<!-- 주소 관련 -->
	<delete id="delete">
		delete from address_book where id
		<if test="ids == null">
			= #{id};
		</if>
		
		<if test="ids != null">
			in (
			<foreach collection="ids" item="id" separator=",">
				#{id}
			</foreach>
			);
		</if>
	</delete>
	
	
	<select id="getCount" resultType="int">
		 SELECT
		    count(distinct id) as count
		FROM (
			select 
				address_book_all_including_tags.*,
		    	af.address_book_id as existFavorite,
		    	af.emp_id as favorite_emp_id 
		    from 	
		    	address_book_all_including_tags  
		   		LEFT JOIN address_favorite as af on id = af.address_book_id and #{emp_id} = af.emp_id
		)temp
		
		WHERE (favorite_emp_id = #{emp_id} or favorite_emp_id is null) and
		<if test="key.equals('is_share')">
		
			<!-- 공유 -->
			<if test="value == -1">
				is_share = 1 and trash = 0
			</if>
			
			<!-- 개인 -->
			<if test="value == 0">
				emp_id = #{emp_id} and is_share = #{value} and trash = 0
			</if>
			
			<!-- 즐겨찾기 -->
			<if test="value == -2">
				existFavorite is not null and trash = 0
			</if>
			
			<!-- 휴지통 -->
			<if test="value == -3">
				
				<if test="auth==1">
					(trash = 1 and is_share = 1) or (trash = 1 and emp_id = #{emp_id})
				</if>
				<!-- 총괄 X -->
				<if test="auth == 0"> 
					trash = 1 and emp_id = #{emp_id}
				</if>
				
			</if>
		</if>
		<if test="key.equals('id')">
			id in (select address_book_id from address_book_tag_list where address_book_tag_id = #{value} and trash = 0)
		</if>
		
		<if test="keyword != null">
			and (name like #{keyword} or company_name like #{keyword} or number like #{keyword})
		</if>
	</select>
	
	
	<select id="select" resultMap="addressBookAll">
		 SELECT
		    id,
		    name,
		    is_share,
		    emp_id,
		    email,
		    numberType,
		    number,
		    company_name,
		    dept_name,
		    job_name,
		    addressType,
		    address,
		    birthType,
		    birth,
		    memo,
		    existFavorite,
		    is_emp,
		    GROUP_CONCAT(tag_id ORDER BY tag_id) AS tag_ids,
		    GROUP_CONCAT(tag_name ORDER BY tag_id) AS tag_names
		FROM (
			select 
				address_book_all_including_tags.*,
		    	af.address_book_id as existFavorite,
		    	af.emp_id as favorite_emp_id 
		    from 	
		    	address_book_all_including_tags  
		   		LEFT JOIN address_favorite as af on id = af.address_book_id and #{emp_id} = af.emp_id
		)temp
		
		WHERE (favorite_emp_id = #{emp_id} or favorite_emp_id is null) and
		<if test="key.equals('is_share')">
		
			<!-- 공유 -->
			<if test="value == -1">
				is_share = 1 and trash = 0
			</if>
			
			<!-- 개인 -->
			<if test="value == 0">
				emp_id = #{emp_id} and is_share = #{value} and trash = 0
			</if>
			
			<!-- 즐겨찾기 -->
			<if test="value == -2">
				existFavorite is not null and trash = 0
			</if>
			
			<!-- 휴지통 -->
			<if test="value == -3">
				
				<if test="auth==1">
					(trash = 1 and is_share = 1) or (trash = 1 and emp_id = #{emp_id})
				</if>
				<!-- 총괄 X -->
				<if test="auth == 0"> 
					trash = 1 and emp_id = #{emp_id}
				</if>
				
			</if>
		</if>
		<if test="key.equals('id')">
			id in (select address_book_id from address_book_tag_list where address_book_tag_id = #{value} and trash = 0)
		</if>
		
		<if test="keyword != null">
			and (name like #{keyword} or company_name like #{keyword} or number like #{keyword})
		</if>
		
		GROUP BY id
		<if test="start != 0 or end != 0">
	    	LIMIT #{start}, #{end}
    	</if>
		; 
	</select>
	
	<select id="selectById" resultMap="addressBookAll">
		<!-- select * from address_book_select_including_tags where id= #{id} -->
		SELECT
		    ab.id,
		    ANY_VALUE(af.address_book_id) as existFavorite,
		    ANY_VALUE(ab.name) AS name,
		    ANY_VALUE(ab.is_share) AS is_share,
		    ANY_VALUE(ab.emp_id) AS emp_id,
		    ANY_VALUE(ab.email) AS email,
		    ANY_VALUE(ab.numberType) AS numberType,
		    ANY_VALUE(ab.number) AS number,
		    ANY_VALUE(ab.company_name) AS company_name,
		    ANY_VALUE(ab.dept_name) AS dept_name,
		    ANY_VALUE(ab.job_name) AS job_name,
		    ANY_VALUE(ab.addressType) AS addressType,
		    ANY_VALUE(ab.address) AS address,
		    ANY_VALUE(ab.birthType) AS birthType,
		    ANY_VALUE(ab.birth) AS birth,
		    ANY_VALUE(ab.memo) AS memo,
		    ANY_VALUE(ab.trash) AS trash,
		    ANY_VALUE(ab.is_emp) AS is_emp,
		    GROUP_CONCAT(at.id ORDER BY at.id) AS tag_ids,
		    GROUP_CONCAT(at.name ORDER BY at.id) AS tag_names
		FROM
		    address_book AS ab
		LEFT JOIN
		    address_book_tag_list AS abtl ON ab.id = abtl.address_book_id
		LEFT JOIN
		    address_book_tag AS at ON abtl.address_book_tag_id = at.id
		LEFT JOIN
		    address_favorite as af on ab.id = af.address_book_id and #{emp_id} = af.emp_id
		where ab.id= #{id}
		GROUP BY ab.id;
	</select>
	
	<select id="getAddressCount" resultType="int">
		
	</select>
	
	<insert id="insert" useGeneratedKeys="true" keyProperty="id">
		insert into address_book( id, name, emp_id, is_share, trash, is_emp	
			<if test="email != null">
				,email
			</if>
			<if test="number != null">
				,numberType, number
			</if>
			<if test="company_name != null">
				,company_name
			</if>
			<if test="dept_name != null">
				,dept_name
			</if>
			<if test="job_name != null">
				,job_name
			</if>
			<if test="address != null">
				,addressType, address
			</if>
			<if test="birth != null">
				,birthType, birth
			</if>
			<if test="memo != null">
				,memo
			</if>
		)
		values( null, #{name}, #{emp_id}, #{is_share}, default, default
			<if test="email != null">
				,#{email}
			</if>
			<if test="number != null">
				,#{numberType}, #{number}
			</if>
			<if test="company_name != null">
				,#{company_name}
			</if>
			<if test="dept_name != null">
				,#{dept_name}
			</if>
			<if test="job_name != null">
				,#{job_name}
			</if>
			<if test="address != null">
				,#{addressType}, #{address}
			</if>
			<if test="birth != null">
				,#{birthType}, #{birth}
			</if>
			<if test="memo != null">
				,#{memo}
			</if>
		);
	</insert>
	
	<insert id="copyAddress">
		insert into address_book
		
		select null, name, #{is_share}, #{id}, email, numberType, number, company_name, dept_name, job_name, addressType, address, birthType, birth, memo, trash, trash_date, is_emp
		from address_book
		where id in
		<foreach collection="ids" item="id" open="(" separator="," close=")">
			#{id}
		</foreach>
	</insert>
	
	<update id="update">
		update 
			address_book 
		set
			name = #{name, jdbcType=VARCHAR},
			email = #{email, jdbcType=VARCHAR},
			numberType = #{numberType, jdbcType=VARCHAR},
			number = #{number, jdbcType=VARCHAR},
			company_name = #{company_name, jdbcType=VARCHAR},
			dept_name = #{dept_name, jdbcType=VARCHAR},
			job_name = #{job_name, jdbcType=VARCHAR},
			addressType = #{addressType, jdbcType=VARCHAR},
			address = #{address, jdbcType=VARCHAR},
			birthType = #{birthType, jdbcType=VARCHAR},
			birth = #{birth, jdbcType=VARCHAR},
			memo = #{memo, jdbcType=VARCHAR}
		where
			id = #{id};
	</update>
	
	<update id="trash">
		update address_book set trash = #{trash}, trash_date =
		<if test="trash == 0">
			null 
		</if>
		<if test="trash == 1">
			now()
		</if>
		
		where id
		<if test="ids == null">
			= #{id};
		</if>
		
		<if test="ids != null">
			in (
			<foreach collection="ids" item="id" separator=",">
				#{id}
			</foreach>
			);
		</if>
	</update>
	

	
	<!-- 태그 관련 -->
	<insert id="tagInsert" useGeneratedKeys="true" keyProperty="id">
		insert into address_book_tag values(null, #{name}, #{emp_id}, #{is_share});
	</insert>
	
	<delete id="tagDelete">
		delete from address_book_tag where id=#{id};
	</delete>
	
	<select id="tagSelectByIsShare" resultType="com.clovers.dto.AddressBookTagDTO">
		select * from address_book_tag where 
		<if test="is_share == 1">
			is_share = #{is_share};
		</if>
		<if test="is_share == 0">
			emp_id = #{emp_id} and is_share =#{is_share};
		</if>
	</select>
	
	<select id="tagSelect" resultType="com.clovers.dto.AddressBookTagDTO">
		select * from address_book_tag where emp_id = #{emp_id} or is_share = 1;
	</select>
	
	<select id="existTag" resultType="java.lang.Integer">
		select count(*) from address_book_tag where id = #{id};
	</select>	
	
	
	<!-- 태그 목록 관련 -->
	<insert id="tagListInsert" parameterType="java.util.List">
		insert into address_book_tag_list values
		<foreach collection="selectedTagArray" item="selectedTag" separator=",">
			(null, #{selectedTag}, #{address_book_id})
		</foreach>
	</insert>
	
	<delete id="tagListDelete">
		delete from address_book_tag_list where address_book_id = #{id};
	</delete>
	
	<!-- 즐겨 찾기 관련 -->	
	<insert id="favoriteInsert">
		insert into address_favorite values(#{address_book_id}, #{emp_id});
	</insert>
	
	<delete id="favoriteDelete">
		delete from address_favorite where address_book_id = #{address_book_id} and emp_id = #{emp_id};
	</delete>
	
	<select id="isFavorite" resultType="java.lang.Integer">
		select count(*) from address_favorite where address_book_id = #{address_book_id} and emp_id = #{emp_id};
	</select>

	<!-- 휴지통에서 30일 경과된 데이터 삭제 -->
	<delete id="autoDeleteInTrash">
		delete from address_book where id in (select id from (select * from address_book where trash = 1 and DATEDIFF(now(), trash_date)>=30)trash_list);
	</delete>
	
	
	<!-- 휴지통에서 지금 비우기 클릭 시 휴지통 비워짐 -->
	<delete id="immediatelyEmpty">
		delete from address_book where (is_share = 1 or (emp_id = #{emp_id} and is_share = 0)) and trash = 1;
	</delete>
</mapper>